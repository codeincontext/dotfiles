" Behavioural Configuration
""""""""""""""""""""""""""""

" without this, GitGutter slows down
" with it, new terms open in bash :/
set shell=/bin/bash

set mouse=a

" hide buffers instead of closing them (keeps undo buffers, etc)
set hidden

" it's the future and we have git
set nobackup
set noswapfile

" Auto-reload modified files (with no local changes)
set autoread

" Assume to ignore case in searches etc
set ignorecase
set smartcase

set incsearch

" Spaces > tabs
set expandtab
set smarttab

" allow backspace across indentation and lines
set backspace=indent,eol

" Delete comment character when joining commented lines
set formatoptions+=j


" Following disabled while I try sleuth
" 2 spaces > 8 spaces
" set shiftwidth=2
" set softtabstop=2
" makefiles use tabs
" autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab

let g:terminal_scrollback_buffer_size=10000


"" Visual Configuration
"""""""""""""""""""""""

" Highlight matching parenthesis
" highlight MatchParen ctermbg=4 " disabled while I try rainbow-parenthesis

" show trailing spaces
set list listchars=tab:\ \ ,trail:Â·

" show line at 80 chars
set tw=80
set colorcolumn=+1
" don't hard wrap text at the 80 char point
set formatoptions-=t

" Setting both relativenumber and number enables hybrid line number mode
set relativenumber
set number

" iterm nightlies support true color
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

let g:terminal_color_0='#2b303b'
let g:terminal_color_1='#bf616a'
let g:terminal_color_2='#a3be8c'
let g:terminal_color_3='#ebcb8b'
let g:terminal_color_4='#8fa1b3'
let g:terminal_color_5='#b48ead'
let g:terminal_color_6='#96b5b4'
let g:terminal_color_7='#c0c5ce'
let g:terminal_color_8='#65737e'
let g:terminal_color_9='#bf616a'
let g:terminal_color_10='#a3be8c'
let g:terminal_color_11='#ebcb8b'
let g:terminal_color_12='#8fa1b3'
let g:terminal_color_13='#b48ead'
let g:terminal_color_14='#96b5b4'
let g:terminal_color_14='eff1f5'

"" Key Mappings
"""""""""""""""

" leader for loading plugins like file navigation and overlays
" - for custom text editing commands like camelCaseMotion
map <Space> <Leader>


nmap <leader>s :terminal fish<CR>

nnoremap  <silent> <tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bnext<CR>
nnoremap  <silent>  <BS>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bprevious<CR>

" open the buffer in a new fullscreen tab (like tmux's <ctrl-a>z)
noremap <leader>z :tab split<CR>

" make Y yank to end of line (like it should always have done)
nmap Y y$

" use the enter key to enter command mode
nmap <CR> :

" don't yank the replaced text when pasting in visual mode
vnoremap p "_dP

" paste something on a new line
nmap -p o<ESC>p

" don't add to jump list when navigating by paragraph
nnoremap <silent> { :keepjumps normal! {<CR>
nnoremap <silent> } :keepjumps normal! }<CR>

if bufwinnr(1)
  map + 3<C-W>+
  map _ 3<C-W>-
endif

set splitbelow

"" Fast pane switching
""""""""""""""""""""""

" should add 1 if nerdtree's open
" top left
nmap <silent> <leader>u 1<c-w>w
" top left then right one
" nmap <silent> <leader>i 1<c-w>w<c-w>l
" Adding the k to avoid ambiguity when moving from nerdtree
nmap <silent> <leader>i 1<c-w>w<c-w>l<c-w>k
" top left then right two
nmap <silent> <leader>o 1<c-w>w<c-w>l<c-w>k<c-w>l
" bottom right then left two
nmap <silent> <leader>j 99<c-w>w<c-w>h<c-w>h
" bottom right then left one
nmap <silent> <leader>k 99<c-w>w<c-w>h
" bottom right
nmap <silent> <leader>l 99<c-w>w

"" Plugins
""""""""""

" you'll need vim-plug installed
call plug#begin('~/.vim/plugged')


" Plugins I could have:
" indentLine: shows indent level with a thin line
" vim-visual-increment: When you need incrementing numbers across multiple lines
" zoomwin: Zooms one pane to full size. Like I'm doing now but assuming better

"" Plugins: Managing files
""""""""""""""""""""""""""

" Project drawer
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
" let NERDTreeHijackNetrw=1
let NERDTreeQuitOnOpen=1
map <leader>n :NERDTreeToggle<CR>
" reveal the current file in NERDTree
map <Leader>N :NERDTreeFind<CR>
" Plug 'dhruvasagar/vim-vinegar'

" fuzzy finder
" TODO: on-demand
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
map <leader>t :FZF<cr>

" find in project
Plug 'dyng/ctrlsf.vim'
" Prompt for search term
nmap     <leader>f <Plug>CtrlSFPrompt
" Search selected term
vmap     <leader>f <Plug>CtrlSFVwordExec

nnoremap <leader>F :CtrlSFToggle<CR>

let g:ctrlsf_mapping = {
    \ "next": "n",
    \ "prev": "N",
    \ }

" vmap     <leader>ff <Plug>CtrlSFVwordPath
" nmap     <leader>fn <Plug>CtrlSFCwordPath
" nmap     <leader>fp <Plug>CtrlSFPwordPath
" nnoremap <leader>fo :CtrlSFOpen<CR>
" inoremap <leader>ft <Esc>:CtrlSFToggle<CR>


"" Plugins: Editing text
""""""""""""""""""""""""

" Binds lots of (next|previous) shortcuts to the [ and ] keys
" eg: [l and ]l for location list
"     [<Space> and ]<Space> add newlines before and after the cursor line
"     [e and ]e to exchange the current line with [count] lines above it.
" It also has some pasting and encoding shortcuts I don't use
Plug 'tpope/vim-unimpaired'

" Autocloses brackets, etc
Plug 'cohama/lexima.vim'

Plug 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Detects file's indentation
Plug 'tpope/vim-sleuth'

" gcc to toggle comments on current line. gc{motion} to toggle comments over a selection
Plug 'tpope/vim-commentary', { 'on': '<Plug>Commentary' }
map  gc  <Plug>Commentary
nmap gcc <Plug>CommentaryLine

" Where ci{ changes the contents of curly braces, cir will change the contents of the current ruby block, if statement, method or class
Plug 'textobj-user'
Plug 'textobj-rubyblock'

" TODO: on-demand
Plug 'skattyadz/charlie.vim'

" todo: on-demand?
" I can't remember why I switched this from \ to -. Maybe for ANSI keyboard
" compatibility
Plug 'bkad/CamelCaseMotion'
xmap  i-e    <Plug>CamelCaseMotion_ie
omap  i-e    <Plug>CamelCaseMotion_ie
xmap  i-b    <Plug>CamelCaseMotion_ib
omap  i-b    <Plug>CamelCaseMotion_ib
xmap  i-w    <Plug>CamelCaseMotion_iw
omap  i-w    <Plug>CamelCaseMotion_iw
map   -e     <Plug>CamelCaseMotion_e
map   -b     <Plug>CamelCaseMotion_b
map   -w     <Plug>CamelCaseMotion_w

" consider https://github.com/junegunn/vim-easy-align

Plug 'junegunn/vim-after-object'
" va=  visual after =
" ca=  change after =
" da=  delete after =
" ya=  yank after =
autocmd VimEnter * call after_object#enable('=', ':', '-', '#', ' ')


"" Plugins: Analysing code
""""""""""""""""""""""""""

" [c and ]c to jump between hunks
" <leader>hs to stage
" <leader>hr to revert
" <leader>hp to preview
Plug 'airblade/vim-gitgutter'

" Code linter



Plug 'benekastah/neomake', { 'on': 'Neomake' }
autocmd! BufWritePost * Neomake
" current error is displayed in status bar
" jump to next error with [l and ]l (from vim-unimpaired)

" let g:neomake_open_list = 2
" let g:neomake_list_height = 5

" work out how many of these are already defined as defaults
let g:neomake_javascript_enabled_makers = ['eslint', 'flow']
let g:neomake_jsx_enabled_makers  = ['eslint', 'flow']
let g:neomake_vim_enabled_makers  = ['vint']
let g:neomake_scss_enabled_makers = ['scsslint']
let g:neomake_error_sign   = { 'texthl': 'SignifySignDelete' }
let g:neomake_warning_sign = { 'texthl': 'SignifySignChange' }
" run this to see highlight groups: :so $VIMRUNTIME/syntax/hitest.vim


" Automatic completion for variable names, etc
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
autocmd! User YouCompleteMe call youcompleteme#Enable()
set pumheight=6
" could add C, typescript, or Go semantic support


"" Plugins: Visual
""""""""""""""""""

" Plug 'morhetz/gruvbox'  bold function names is quite nice
Plug 'chriskempson/base16-vim' " bold do/end keywords is annoying

Plug 'junegunn/rainbow_parentheses.vim', { 'on': 'RainbowParentheses' }
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
map <silent> <leader>r :RainbowParentheses!!<cr>

Plug 'ap/vim-css-color', { 'for': ['css', 'scss'] }

" highlights one letter of each word that you can jump to with f
Plug 'unblevable/quick-scope'
" let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

Plug 'pangloss/vim-javascript' " required by vim-jsx
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0 " Allow JSX in normal JS files


call plug#end()

"" Post-plugin-init config
""""""""""""""""""""""""""

set background=dark
colorscheme base16-ocean
" colorscheme gruvbox

" open nerdtree on load if it's a directory
if isdirectory(argv(0))
    bd
    autocmd vimenter * exe "cd" argv(0)
    autocmd VimEnter * NERDTree
endif

" Close if the only thing left is nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
